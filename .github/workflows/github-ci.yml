name: CI rally_back

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  build-publish-deploy:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        python-version: ["3.12"]

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: pip install -r requirements.txt

      - name: Run Pylint
        working-directory: ./src/rally-main/rally_back
        run: pylint .

      - name: Scan for secrets
        working-directory: ./src/rally-main/rally_back
        run: detect-secrets scan .

      - name: Build Docker image
        run: docker build . -t 20220796/raqiros:latest -t 20220796/raqiros:${{ github.sha }} --target prod

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Push Docker image
        run: |
          docker push 20220796/raqiros:latest
          docker push 20220796/raqiros:${{ github.sha }}

      - name: Connect to VM and deploy
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.DEPLOY_SSH_PRIVATE_KEY }}" > ~/.ssh/id_ed25519
          chmod 600 ~/.ssh/id_ed25519
          ssh-keyscan -H ${{ vars.DEPLOY_PUBLIC_IP }} >> ~/.ssh/known_hosts

      - name: Connect to VM and deploy
        run: |
            ssh ${{ vars.DEPLOY_USER }}@${{ vars.DEPLOY_PUBLIC_IP }} << 'EOF'
              rm -rf docker-avance-tp2

              git clone https://github.com/SyraxTarg/docker-avance-tp2.git
              cd docker-avance-tp2

              echo "SECRET_KEY=${{ secrets.SECRET_KEY }}" > .env
              echo "ALGORITHM=${{ secrets.ALGORITHM }}" >> .env
              echo "ACCESS_TOKEN_EXPIRE_MINUTES=${{ secrets.ACCESS_TOKEN_EXPIRE_MINUTES }}" >> .env
              echo "REFRESH_TOKEN_EXPIRE_DAYS=${{ secrets.REFRESH_TOKEN_EXPIRE_DAYS }}" >> .env
              echo "REFRESH_TOKEN_EXPIRE_DAYS_REMEMBER_ME=${{ secrets.REFRESH_TOKEN_EXPIRE_DAYS_REMEMBER_ME }}" >> .env
              echo "STRIPE_SECRET_KEY=${{ secrets.STRIPE_SECRET_KEY }}" >> .env
              echo "STRIPE_WEBHOOK_SECRET=${{ secrets.STRIPE_WEBHOOK_SECRET }}" >> .env
              echo "STRIPE_SUCCESS_URL=${{ secrets.STRIPE_SUCCESS_URL }}" >> .env
              echo "STRIPE_CANCEL_URL=${{ secrets.STRIPE_CANCEL_URL }}" >> .env
              echo "STRIPE_REFRESH_URL=${{ secrets.STRIPE_REFRESH_URL }}" >> .env
              echo "STRIPE_RETURN_URL=${{ secrets.STRIPE_RETURN_URL }}" >> .env
              echo "EMAIL_SENDER=${{ secrets.EMAIL_SENDER }}" >> .env
              echo "SMTP_SENDER=${{ secrets.SMTP_SENDER }}" >> .env
              echo "SMTP_PORT=${{ secrets.SMTP_PORT }}" >> .env
              echo "EMAIL_PASSWORD=${{ secrets.EMAIL_PASSWORD }}" >> .env
              echo "BANNED_TERMS_PATH=${{ secrets.BANNED_TERMS_PATH }}" >> .env
              echo "RALLY_HOST=${{ secrets.RALLY_HOST }}" >> .env
              echo "RALLY_BACK_HOST=${{ secrets.RALLY_BACK_HOST }}" >> .env
              echo "NEXT_PUBLIC_RALLY_BACK_HOST=${{ secrets.NEXT_PUBLIC_RALLY_BACK_HOST }}" >> .env
              echo "RALLY_FRONT_HOST=${{ secrets.RALLY_FRONT_HOST }}" >> .env
              echo "CLOUDINARY_CLOUD_NAME=${{ secrets.CLOUDINARY_CLOUD_NAME }}" >> .env
              echo "CLOUDINARY_API_KEY=${{ secrets.CLOUDINARY_API_KEY }}" >> .env
              echo "CLOUDINARY_API_SECRET=${{ secrets.CLOUDINARY_API_SECRET }}" >> .env
              echo "DATABASE_URL=${{ secrets.DATABASE_URL }}" >> .env
              echo "RECAPTCHA_SECRET_KEY=${{ secrets.RECAPTCHA_SECRET_KEY }}" >> .env
              echo "RECAPTCHA_FRONT=${{ secrets.RECAPTCHA_FRONT }}" >> .env
              echo "LISTEN_IP=${{ secrets.LISTEN_IP }}" >> .env
              echo "LISTEN_PORT=${{ secrets.LISTEN_PORT }}" >> .env

              docker compose down -v
              docker compose -f docker-compose-prod.yml up --build -d
            EOF
